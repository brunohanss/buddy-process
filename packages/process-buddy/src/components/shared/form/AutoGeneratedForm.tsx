import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { SetupData, SetupDataItem } from "@brux/shared/src/schemas/baseIntegration";
import { useForm, useFieldArray } from "react-hook-form";

export default function AutoGeneratedForm({
  fields,
}: {
  fields: SetupData;
}) {
  console.log("fields", fields)
  const { control, handleSubmit } = useForm();
  const { fields: arrayFields, append } = useFieldArray({
    control,
    name: "dynamicField",
  });

  const onSubmit = (data: any) => {
    console.log("Form submitted with data:", data);
  };

  const renderField = (field: SetupDataItem) => {
    switch (field.type) {
      case "string":
        return (
          <FormField
            control={control}
            name={field.name}
            render={({ field: renderField }) => (
              <FormItem>
                <FormLabel>{field.name}</FormLabel>
                <FormControl>
                  <Input placeholder={field.placeholder} {...renderField} />
                </FormControl>
                <FormDescription>{field.description}</FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
        );

      case "string[]":
        return (
          <div>
            <FormLabel>{field.name}</FormLabel>
            {arrayFields.map((arrayField, index) => (
              <FormField
                key={arrayField.id}
                control={control}
                name={`dynamicField.${index}.value`}
                render={({ field: renderField }) => (
                  <FormItem>
                    <FormControl>
                      <Input placeholder={field.placeholder} {...renderField} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            ))}
            <Button type="button" onClick={() => append({ value: "" })}>
              Add Value
            </Button>
            <FormDescription>{field.description}</FormDescription>
          </div>
        );

      case "boolean":
        return (
          <FormField
            control={control}
            name={field.name}
            render={({ field: renderField }) => (
              <FormItem className="flex flex-row items-center space-x-3">
                <FormLabel>{field.name}</FormLabel>
                <FormControl>
                  <Switch
                    checked={renderField.value}
                    onCheckedChange={renderField.onChange}
                  />
                </FormControl>
                <FormDescription>{field.description}</FormDescription>
              </FormItem>
            )}
          />
        );

      // case "select":
      //   return (
      //     <FormField
      //       control={control}
      //       name={field.name}
      //       render={({ field: renderField }) => (
      //         <FormItem>
      //           <FormLabel>{field.name}</FormLabel>
      //           <FormControl>
      //             <Select
      //               onValueChange={renderField.onChange}
      //               defaultValue={renderField.value}
      //             >
      //               <SelectTrigger>
      //                 <SelectValue placeholder={field.placeholder} />
      //               </SelectTrigger>
      //               <SelectContent>
      //                 {field.options.map((option) => (
      //                   <SelectItem key={option} value={option}>
      //                     {option}
      //                   </SelectItem>
      //                 ))}
      //               </SelectContent>
      //             </Select>
      //           </FormControl>
      //           <FormDescription>{field.description}</FormDescription>
      //           <FormMessage />
      //         </FormItem>
      //       )}
      //     />
      //   );

      default:
        return null;
    }
  };

  return (
    <Form >
      {fields.map((field) => (
        <div key={field.name}>{renderField(field)}</div>
      ))}
      <Button type="submit" onSubmit={handleSubmit(onSubmit)}>Save Changes</Button>
    </Form>
  );
}
