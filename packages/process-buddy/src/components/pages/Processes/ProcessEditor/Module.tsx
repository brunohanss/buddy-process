import { memo, type ReactNode } from "react";
import { Handle, Position, type Node, type NodeProps } from "@xyflow/react";
import { LazyLoadImage } from "react-lazy-load-image-component";
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import AutoGeneratedForm from "@/components/shared/form/AutoGeneratedForm";
import "./Module.css";

export default memo(({ data, gradientColors = ["#e92a67", "#a853ba", "#2a8af6", "rgba(42, 138, 246, 0)"], isPaused = false }: any) => {
  const getStatusStyle = (gradientColors: any[], isPaused: any) => {
    const gradient = `conic-gradient(
      from -160deg at 50% 50%,
      ${gradientColors[0]} 0deg,
      ${gradientColors[1]} 120deg,
      ${gradientColors[2]} 240deg,
      ${gradientColors[3]} 360deg
    )`;
  
    return {
      style: {
        backgroundImage: gradient,
        animationPlayState: isPaused ? "paused" : "running", // Controls animation state
      },
      class: "gradient",
    };
  };
  const { status, baseModule, baseIntegration, subline } = data;
  const foundModuleAction = baseModule?.module_actions.find((action: { name: string | undefined; }) => action?.name === subline);
  const moduleStyle = getStatusStyle(gradientColors, isPaused);

  if (!foundModuleAction) {
    console.warn("Module action inputs were not found");
    throw new Error("Module action inputs were not found")
  }
  return (
    <div
    className={`module-wrapper ${moduleStyle?.class}`}
    style={moduleStyle.style}
    >
      <div className="cloud gradient-action-type">
        <div>{data?.icon && data.icon}</div>
      </div>
      <div className="wrapper gradient">
        <Dialog>
          <DialogTrigger asChild>
            <div className="inner">
              <div className="body">
                <LazyLoadImage
                  src={data?.moduleIconUrl}
                  alt="Integration Logo"
                  effect="blur"
                  height={30}
                  width={30}
                />
                <div>
                  <div className="title">{data.title}</div>
                  {data.subline && (
                    <div className="subline">{data.subline}</div>
                  )}
                </div>
              </div>
            </div>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Edit Module</DialogTitle>
            </DialogHeader>
            <AutoGeneratedForm fields={[{
    type: 'string',
    name: 'Email input',
    description: 'Email description',
    placeholder: 'Input your email please',
    optional: true
}]} />
            <DialogFooter></DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
      {/* Target (In) Handle */}
      <Handle
        type="target"
        position={Position.Left}
        id="in-handle"
        style={{
          position: "absolute",
          left: -12, // Move outside the node boundary
          top: "50%",
          transform: "translateY(-50%)",
          background: "#e92a67",
          border: "2px solid #fff",
          width: 12,
          height: 12,
          borderRadius: "50%",
          zIndex: 10, // Ensure handle is on top
          opacity: 1,
        }}
      />

      {/* Source (Out) Handle */}
      <Handle
        type="source"
        position={Position.Right}
        id="out-handle"
        style={{
          position: "absolute",
          right: -12, // Move outside the node boundary
          top: "50%",
          transform: "translateY(-50%)",
          background: "#2a8af6",
          border: "2px solid #fff",
          width: 12,
          height: 12,
          borderRadius: "50%",
          zIndex: 10, // Ensure handle is on top
          opacity: 1,
        }}
      />
    </div>
  );
});
